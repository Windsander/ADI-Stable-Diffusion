name: 02 Auto deploy clitools (Release)

on:
  workflow_run:
    workflows: ["01 Auto publish packages (Release)"]
    types:
      - completed
    branches:
      - 'release/release-v*'

jobs:
  setup_environment:
    if: ${{ github.event.workflow_run.conclusion == 'success'}}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Switch to release branch
        id: switch_branch
        run: |
          git checkout ${{ github.event.workflow_run.head_branch }}
          echo "TARGET_BRANCH=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_ENV
          echo "Switched to branch: ${{ env.TARGET_BRANCH }}"

      - name: Extract version from branch name
        id: extract_version
        shell: bash
        run: |
          VERSION=$(echo "${{ github.event.workflow_run.head_branch }}" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

    outputs:
      target_branch: ${{ env.TARGET_BRANCH }}
      version: ${{ env.VERSION }}

  deploy_linux:
    needs: setup_environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.setup_environment.outputs.target_branch }}

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential devscripts debhelper rpm
          sudo apt-get install -y cmake ninja-build curl coreutils dput dpkg
          sudo apt-get install -y python3-pip
          sudo pip3 install copr-cli

      - name: Run deploy script
        shell: bash
        run: |
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          chmod +x auto_deploy.sh
          ./auto_deploy.sh --version ${{ needs.setup_environment.outputs.version }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifacts
          path: |
            *.deb
            *.rpm

  deploy_macos:
    needs: setup_environment
    runs-on: macos-latest

    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.setup_environment.outputs.target_branch }}

      - name: Set up environment
        run: |
          if ! command -v brew &> /dev/null; then
            echo "Homebrew not found, please install Homebrew first."
            exit 1
          fi
          brew install cmake ninja coreutils

      - name: Run deploy script
        shell: bash
        run: |
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          chmod +x auto_deploy.sh
          ./auto_deploy.sh --version ${{ needs.setup_environment.outputs.version }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macos-artifacts
          path: |
            *.rb

  deploy_windows:
    needs: setup_environment
    runs-on: windows-latest

    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.setup_environment.outputs.target_branch }}

      - name: Set up environment
        run: |
          powershell -NoProfile -ExecutionPolicy Bypass -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
          choco install cmake -y
          choco install ninja -y
          choco install curl -y
          choco install git -y

      - name: Run deploy script
        shell: bash
        run: |
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          chmod +x auto_deploy.sh
          ./auto_deploy.sh --version ${{ needs.setup_environment.outputs.version }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifacts
          path: |
            *.nupkg

  finalize_deploy:
    needs: [setup_environment, deploy_macos, deploy_windows] # deploy_linux, is temporary exclude
    runs-on: ubuntu-latest

    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.setup_environment.outputs.target_branch }}

      - name: Download macOS artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos-artifacts
          path: ./artifacts/macos

      - name: Download Windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-artifacts
          path: ./artifacts/windows

      - name: Copy and rename changelog file
        run: |
          cd $GITHUB_WORKSPACE
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md CHANGELOG-${{ needs.setup_environment.outputs.version }}.md
          fi

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.ADI_DEPLOY_TOKEN }}
        run: |
          git config --global user.name "github-actions[deploy-bot]"
          git config --global user.email "github-actions[deploy-bot]@users.noreply.github.com"
          git checkout -b deploy
          cp ./artifacts/macos/* .
          cp ./artifacts/windows/* .
          git add *.rb *.deb *.rpm *.nupkg README.md LICENSE CHANGELOG-${{ needs.setup_environment.outputs.version }}.md
          git commit -m "Deploy version ${{ needs.setup_environment.outputs.version }}"
          git push origin deploy