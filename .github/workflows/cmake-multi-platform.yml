name: Cross Compilation on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  cross:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        platform: [ windows, linux, macos, android ]
        build_type: [ MinSizeRel, Debug ]
        c_compiler: [ gcc, clang, cl ]
        arch: [ x86_64, aarch64, arm64, x86, arm64-v8a, armeabi-v7a ]
        exclude:
          # Linux (keep: x86_64, aarch64)
          - platform: linux
            arch: arm64-v8a
          - platform: linux
            arch: armeabi-v7a
          - platform: linux
            arch: x86
          - platform: linux
            arch: arm64
          # macOS (keep: x86_64, arm64)
          - platform: macos
            arch: arm64-v8a
          - platform: macos
            arch: armeabi-v7a
          - platform: macos
            arch: x86
          - platform: macos
            arch: aarch64
          # Windows (keep: x86_64, x86, arm64)
          - platform: windows
            arch: arm64-v8a
          - platform: windows
            arch: armeabi-v7a
          - platform: windows
            arch: aarch64
          # Android (keep: x86_64, x86, arm64-v8a, armeabi-v7a)
          - platform: android
            arch: aarch64
          - platform: android
            arch: arm64
          # Exclude unsupported compiler combinations
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y ninja-build

      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: brew install ninja

      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Set up Android SDK and NDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2
        with:
          api-level: 27
          ndk-version: 26.1.10909125
          cmake-version: 3.29.5

      - name: Run auto_build.sh
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            bash ./auto_build.sh --platform android \
                                 --cmake "cmake" \
                                 --ninja "ninja" \
                                 --build-type ${{ matrix.build_type }} \
                                 --jobs 4 \
                                 --android-sdk "$ANDROID_SDK_ROOT" \
                                 --android-ndk "$ANDROID_NDK_HOME" \
                                 --android-ver 27 \
                                 -c
          else
            bash ./auto_build.sh --platform ${{ matrix.platform }} \
                                 --cmake "cmake" \
                                 --ninja "ninja" \
                                 --build-type ${{ matrix.build_type }} \
                                 --jobs 4 \
                                 -c
          fi

#      - name: Test
#        working-directory: ${{ steps.strings.outputs.build-output-dir }}
#        run: ctest --build-config ${{ matrix.build_type }}